<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:local="clr-namespace:Map.Client" 
					xmlns:customControls="clr-namespace:Map.Client.Resources.CustomControls"
					xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
                    xmlns:cmd="http://www.galasoft.ch/mvvmlight"
					xmlns:converters="clr-namespace:Map.Client.Helpers.Converters"
					xmlns:templateSelectors="clr-namespace:Map.Client.Helpers.DataTemplateSelectors" 
					xmlns:userControls="clr-namespace:Map.Client.Resources.UserControls"
                     xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm">

    <!-- Static brushes-->
	<SolidColorBrush x:Key="StandardBorderBrush" Color="#888" />
	<SolidColorBrush x:Key="StandardBackgroundBrush" Color="Black" />
	<SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
	<SolidColorBrush x:Key="SelectedBackgroundBrush" Color="Gray" />
	<SolidColorBrush x:Key="SelectedForegroundBrush" Color="White" />
	<SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
	<SolidColorBrush x:Key="GlyphBrush" Color="#444" />
	<SolidColorBrush x:Key="NormalBrush" Color="#888" />
	<SolidColorBrush x:Key="NormalBorderBrush" Color="#888" />
	<SolidColorBrush x:Key="HorizontalNormalBrush" Color="#FF686868" />
	<SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />
	<!--Combo box brushes -->
	<SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#e3e9ef" />
	<SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#fff" />
	<SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
	<SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
	<SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

	<LinearGradientBrush x:Key="ListBoxBackgroundBrush" StartPoint="0,0" EndPoint="1,0.001">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="White" Offset="0.0" />
				<GradientStop Color="White" Offset="0.6" />
				<GradientStop Color="#DDDDDD" Offset="1.2"/>
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="StandardBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#FFF" Offset="0.0"/>
				<GradientStop Color="#CCC" Offset="1.0"/>
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Color="#BBB" Offset="0.0"/>
				<GradientStop Color="#EEE" Offset="0.1"/>
				<GradientStop Color="#EEE" Offset="0.9"/>
				<GradientStop Color="#FFF" Offset="1.0"/>
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>

	<!--Converters-->
	<converters:StringToUriConverter x:Key="StringToUriConverter" />
	<converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
	<converters:BoolToVisibilityMultiConverter x:Key="BoolToVisibilityMultiConverter" />
	<converters:ManagerToStaticStringConverter x:Key="ManagerToStaticStringConverter"/>
	<!--MultiSelect Combo box-->

	
	<!-- BUTTON style-->
	<Style TargetType="Button" x:Key="btnStyle">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border Name="btnBorder" Background="{TemplateBinding  Background}"/>
						<Label Content="{TemplateBinding Content}" FontSize="{DynamicResource fnt_btnContent}"
							   HorizontalAlignment="Center"
							   Foreground="{TemplateBinding Foreground}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" TargetName="btnBorder" Value="0.8"/>
							<Setter Property="Margin" TargetName="btnBorder" Value="-2"/>

						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Opacity" TargetName="btnBorder" Value="1"/>
							<Setter Property="Margin" TargetName="btnBorder" Value="0"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--Data templates-->
	<DataTemplate x:Key="TemplateSettings">
		<userControls:UC_Settings/>
	</DataTemplate>

	<DataTemplate x:Key="TemplateHome">
		<Grid Background="Transparent" >
            <Image Source="/Resources/Images/ThalesLogo.png"  />
		</Grid>
	</DataTemplate>	
	<DataTemplate x:Key="TemplateSoldier">
		<userControls:UC_Soldier/>
	</DataTemplate>

    <DataTemplate x:Key="TemplateMap">
        <userControls:UC_Map/>
    </DataTemplate>


    <DataTemplate x:Key="TemplateInfoMsgBx">
		<Grid>
			<Grid Background="{DynamicResource brush_Background}"  Opacity="0.9"></Grid>
			<Grid VerticalAlignment="Center" HorizontalAlignment="Stretch" Background="{DynamicResource brush_infoMsgBxBackground}" Opacity="1" Height="150">
				<Grid.ColumnDefinitions>
					<ColumnDefinition/>
					<ColumnDefinition/>
					<ColumnDefinition/>
				</Grid.ColumnDefinitions>
				<StackPanel Orientation="Vertical" Grid.Column="1" VerticalAlignment="Center">
					<TextBlock Text="{Binding Title}" Foreground="White" FontWeight="SemiBold" FontSize="{DynamicResource fnt_ErrorTitle}" Margin="0 10 0 0" HorizontalAlignment="Left"/>
					<TextBlock Text="{Binding Text}" Foreground="White" FontSize="{DynamicResource fnt_ErrorText}" Margin="0 10 0 0" HorizontalAlignment="Stretch" TextWrapping="Wrap"/>
					<Button Cursor="Hand" Style="{StaticResource btnStyle}" Background="White" Width="60" HorizontalAlignment="Left"
							Margin="0 20 0 0" Content="{DynamicResource txtBtnOk}" Foreground="Black">
                        <dxmvvm:Interaction.Behaviors>
                            <dxmvvm:EventToCommand  EventName="Click" Command="{Binding OkCommand}" />
                        </dxmvvm:Interaction.Behaviors>
                    </Button>
				</StackPanel>
			</Grid>
		</Grid>

	</DataTemplate>

	<DataTemplate x:Key="TemplateErrorMsgBx">
		<Grid>
			<Grid Background="{DynamicResource brush_Background}"  Opacity="0.9"></Grid>
			<Grid VerticalAlignment="Center" HorizontalAlignment="Stretch" Background="{DynamicResource brush_errMsgBxBackground}" Opacity="1" Height="150">
				<Grid.ColumnDefinitions>
					<ColumnDefinition/>
					<ColumnDefinition/>
					<ColumnDefinition/>
				</Grid.ColumnDefinitions>
				<StackPanel Orientation="Vertical" Grid.Column="1" VerticalAlignment="Center">
					<TextBlock Text="{Binding Title}" Foreground="White" FontWeight="SemiBold" FontSize="{DynamicResource fnt_ErrorTitle}" Margin="0 10 0 0" HorizontalAlignment="Left"/>
					<TextBlock Text="{Binding Text}" TextWrapping="Wrap"  Foreground="White" FontSize="{DynamicResource fnt_ErrorText}" Margin="0 10 0 0" HorizontalAlignment="Stretch"/>
					<Button Cursor="Hand" Style="{StaticResource btnStyle}" Background="White" Width="60"  HorizontalAlignment="Left" Margin="0 20 0 0"
							Content="{DynamicResource txtBtnOk}" Foreground="Black">
                        <dxmvvm:Interaction.Behaviors>
                            <dxmvvm:EventToCommand  EventName="Click" Command="{Binding OkCommand}" />
                        </dxmvvm:Interaction.Behaviors>
                    </Button>
				</StackPanel>
			</Grid>
		</Grid>

	</DataTemplate>



	<DataTemplate x:Key="TemplateConfirmMsgBx">
		<Grid>
			<Grid Background="{DynamicResource brush_Background}"  Opacity="0.9"></Grid>
			<Grid VerticalAlignment="Center" HorizontalAlignment="Stretch" Background="{DynamicResource brush_confirmMsgBxBackground}" Opacity="1" Height="150">
				<Grid.ColumnDefinitions>
					<ColumnDefinition/>
					<ColumnDefinition/>
					<ColumnDefinition/>
				</Grid.ColumnDefinitions>
				<StackPanel Orientation="Vertical" Grid.Column="1" VerticalAlignment="Center">
					<TextBlock Text="{Binding Title}" Foreground="White" FontWeight="SemiBold" FontSize="{DynamicResource fnt_ErrorTitle}" Margin="0 10 0 0" HorizontalAlignment="Left"/>
					<TextBlock Text="{Binding Text}" TextWrapping="Wrap"  Foreground="White" FontSize="{DynamicResource fnt_ErrorText}" Margin="0 10 0 0" HorizontalAlignment="Stretch"/>
					<StackPanel Orientation="Horizontal">
						<Button Cursor="Hand" Style="{StaticResource btnStyle}" Background="#c3c6c9" Width="60"  HorizontalAlignment="Left" Margin="0 20 0 0" 
								Content="{DynamicResource txtBtnYes}" Foreground="Black">
                            <dxmvvm:Interaction.Behaviors>
                                <dxmvvm:EventToCommand  EventName="Click" Command="{Binding YesCommand}" />
                            </dxmvvm:Interaction.Behaviors>
                        </Button>
						<Button Cursor="Hand" Style="{StaticResource btnStyle}" Background="#c3c6c9" Width="60"  HorizontalAlignment="Left" Margin="20 20 0 0" 
								Content="{DynamicResource txtBtnNo}" Foreground="Black" >
                            <dxmvvm:Interaction.Behaviors>
                                <dxmvvm:EventToCommand  EventName="Click" Command="{Binding NoCommand}" />
                            </dxmvvm:Interaction.Behaviors>
                        </Button>

					</StackPanel>
				</StackPanel>
			</Grid>
		</Grid>

	</DataTemplate>

	<!--Template selectors-->
	<templateSelectors:MainContentSelector x:Key="MainContentSelector"  
										   SettingsTemplate="{StaticResource TemplateSettings}"
										   HomeTemplate="{StaticResource TemplateHome}"
										   SoldierTemplate="{StaticResource TemplateSoldier}" MapTemplate="{StaticResource TemplateMap}"  />


	<templateSelectors:MsgContentSelector x:Key="MsgContentSelector" InfoMsgTemplate="{StaticResource TemplateInfoMsgBx}" 
										  ErrorTemplate="{StaticResource TemplateErrorMsgBx}" ConfirmMsgTemplate="{StaticResource TemplateConfirmMsgBx}"/>


	<Style TargetType="{x:Type customControls:WatermarkTextBox}">
		<Setter Property="FontSize" Value="{DynamicResource fnt_txtBxContent}"/>
		<Setter Property="Foreground" Value="{DynamicResource brush_textColor}"/>
		<Setter Property="AcceptsReturn" Value="True" />
		<Setter Property="FontWeight" Value="ExtraLight" />
		<Setter Property="MaxLines" Value="{Binding Path=MaxLines,RelativeSource={RelativeSource Mode=TemplatedParent}}" />
		<Setter Property="Validation.ErrorTemplate" >
			<Setter.Value>				
					<ControlTemplate>
							<Border BorderBrush="Red" BorderThickness="1">
								<AdornedElementPlaceholder x:Name="controlWithError"/>
							</Border>
					</ControlTemplate>				
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type customControls:WatermarkTextBox}">

					<StackPanel>
						<TextBlock x:Name="txtHint" IsHitTestVisible="False" 
								   Foreground="{DynamicResource brush_textColor}"
								   Text="{Binding Watermark,RelativeSource={RelativeSource Mode=TemplatedParent}}" Height="Auto"  VerticalAlignment="Bottom" 
								   FontSize="{DynamicResource fnt_txtBxTitle}"
							   HorizontalAlignment="Left" Margin="0,0,0,0"  RenderTransformOrigin="0,0" >
							<TextBlock.RenderTransform>
								<TransformGroup>
									<ScaleTransform x:Name="scaleTransform" ScaleX="1" ScaleY="1" />
									<TranslateTransform x:Name="translate" X="1" Y="20" />
								</TransformGroup>
							</TextBlock.RenderTransform>
						</TextBlock>
						<ScrollViewer x:Name="PART_ContentHost"   VerticalScrollBarVisibility="Visible"/>

						<Rectangle Height="2" Fill="{DynamicResource brush_Secondary}" VerticalAlignment="Bottom" StrokeThickness="1"  />

					</StackPanel>

					<ControlTemplate.Triggers>
						<Trigger Property="RemoveWaterMark"   Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard  >
										<DoubleAnimation Storyboard.TargetName="scaleTransform"  Storyboard.TargetProperty="ScaleX"  From="1"  To="0.7" Duration="0:0:0.100" />
										<DoubleAnimation  Storyboard.TargetName="scaleTransform" Storyboard.TargetProperty="ScaleY"  From="1"  To="0.7" Duration="0:0:0.100" />
										<DoubleAnimation  Storyboard.TargetName="translate" Storyboard.TargetProperty="Y"  From="20"  To="1" Duration="0:0:0.100" />
									</Storyboard>

								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard  >
										<DoubleAnimation Storyboard.TargetName="scaleTransform" Storyboard.TargetProperty="ScaleX"  From="0.7"  To="1" Duration="0:0:0.100" />
										<DoubleAnimation Storyboard.TargetName="scaleTransform"  Storyboard.TargetProperty="ScaleY"  From="0.7"  To="1" Duration="0:0:0.100" />
										<DoubleAnimation Storyboard.TargetName="translate"  Storyboard.TargetProperty="Y"  From="1"  To="20" Duration="0:0:0.100" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Validation.HasError" Value="true">
				<Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
			</Trigger>
		</Style.Triggers>
	</Style>


    <Style TargetType="{x:Type customControls:WatermarkColorEdit}">
        <Setter Property="FontSize" Value="{DynamicResource fnt_txtBxContent}"/>
        <Setter Property="Foreground" Value="{DynamicResource brush_textColor}"/>
        <Setter Property="FontWeight" Value="ExtraLight" />
        <Setter Property="Validation.ErrorTemplate" >
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="Red" BorderThickness="1">
                        <AdornedElementPlaceholder x:Name="controlWithError"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type customControls:WatermarkColorEdit}">

                    <StackPanel>
                        <TextBlock x:Name="txtHint" IsHitTestVisible="False" 
							   Foreground="{DynamicResource brush_textColor}"
							   Text="{Binding Watermark,RelativeSource={RelativeSource Mode=TemplatedParent}}" Height="Auto"  VerticalAlignment="Bottom" 
							   FontSize="{DynamicResource fnt_txtBxTitle}"
						   HorizontalAlignment="Left" Margin="0,0,0,0"  RenderTransformOrigin="0,0" >
                            <TextBlock.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="scaleTransform" ScaleX="1" ScaleY="1" />
                                    <TranslateTransform x:Name="translate" X="1" Y="20" />
                                </TransformGroup>
                            </TextBlock.RenderTransform>
                        </TextBlock>
                        <ScrollViewer x:Name="PART_ContentHost"   VerticalScrollBarVisibility="Visible"/>

                        <Rectangle Height="2" Fill="{DynamicResource brush_Secondary}" VerticalAlignment="Bottom" StrokeThickness="1"  />

                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="RemoveWaterMark"   Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard  >
                                        <DoubleAnimation Storyboard.TargetName="scaleTransform"  Storyboard.TargetProperty="ScaleX"  From="1"  To="0.7" Duration="0:0:0.100" />
                                        <DoubleAnimation  Storyboard.TargetName="scaleTransform" Storyboard.TargetProperty="ScaleY"  From="1"  To="0.7" Duration="0:0:0.100" />
                                        <DoubleAnimation  Storyboard.TargetName="translate" Storyboard.TargetProperty="Y"  From="20"  To="1" Duration="0:0:0.100" />
                                    </Storyboard>

                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard  >
                                        <DoubleAnimation Storyboard.TargetName="scaleTransform" Storyboard.TargetProperty="ScaleX"  From="0.7"  To="1" Duration="0:0:0.100" />
                                        <DoubleAnimation Storyboard.TargetName="scaleTransform"  Storyboard.TargetProperty="ScaleY"  From="0.7"  To="1" Duration="0:0:0.100" />
                                        <DoubleAnimation Storyboard.TargetName="translate"  Storyboard.TargetProperty="Y"  From="1"  To="20" Duration="0:0:0.100" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    

    <Style TargetType="{x:Type customControls:ImageButton}">
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type customControls:ImageButton}">
					<Grid Name="gridMain" Background="{TemplateBinding Background}">
						<Image x:Name="img" Width="{Binding ImageWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}"
						   Height="{Binding ImageHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" 
						   Source="{Binding ImagePath, RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource StringToUriConverter}}" 
							   HorizontalAlignment="{Binding PathHorizontalAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}" 
							   VerticalAlignment="{Binding PathVerticalAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}"  />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Source" TargetName="img" 
									Value="{Binding HoverImagePath, RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource StringToUriConverter}}" />
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type customControls:MenuRadioButton}">
		<Setter Property="Margin" Value="0 10 10 0" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type customControls:MenuRadioButton}">
					<StackPanel x:Name="stckPnl" Orientation="Vertical" Background="Transparent">
						<TextBlock x:Name="txtCntnt" Foreground="{TemplateBinding ForeColor}"  Text="{TemplateBinding Content}" />
						<Rectangle x:Name="rectSelected" HorizontalAlignment="Stretch" Stroke="{TemplateBinding ForeColor}" RenderTransformOrigin="0.5, 0.5">
							<Rectangle.RenderTransform>
								<ScaleTransform x:Name="scaleTransform" ScaleX="1" ScaleY="1" />
							</Rectangle.RenderTransform>
						</Rectangle>
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="False">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="scaleTransform" Storyboard.TargetProperty="ScaleX" From="1" To="0" Duration="0:0:0.1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="scaleTransform" Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>


						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Foreground" TargetName="txtCntnt" Value="{Binding Path=HoverColor,RelativeSource={RelativeSource Mode=TemplatedParent}}"></Setter>
							<Setter Property="Stroke" TargetName="rectSelected" Value="{Binding Path=HoverColor,RelativeSource={RelativeSource Mode=TemplatedParent}}"></Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type customControls:ImageTextButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type customControls:ImageTextButton}">
					<Grid Cursor="Hand">
						<Border Name="btnBorder" Background="{DynamicResource brush_buttonColor}"/>
						<StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center" >
							<Label Content="{TemplateBinding ButtonText}" FontSize="{DynamicResource fnt_btnContent}" Foreground="{DynamicResource brush_buttonTextColor}" />
							<Image Margin="5 0 5 0" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{TemplateBinding ImagePath}" Width="12" Height="12" />
						</StackPanel>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" TargetName="btnBorder" Value="{DynamicResource brush_buttonHoverColor}"/>
							<Setter Property="Margin" TargetName="btnBorder" Value="-2"/>

						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="DataGridColumnHeader">
		<Style.Setters>
			<Setter Property="SeparatorBrush" Value="#FFC9CACA"/>
			<Setter Property="Foreground" Value="{DynamicResource brush_dgHeaderTextColor}"/>
			<Setter Property="Height" Value="40"/>
			<Setter Property="FontSize" Value="{DynamicResource fnt_dgHeaderText}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="DataGridColumnHeader">
						<Grid Background="{DynamicResource brush_Primary}">
							<TextBlock Text="{Binding Path=Content,RelativeSource={RelativeSource Mode=TemplatedParent}}"
									   Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"
									   VerticalAlignment="Center" HorizontalAlignment="Center" />
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style.Setters>
	</Style>

	<Style TargetType="TabItem">
		<Setter Property="HeaderTemplate">
			<Setter.Value>
				<DataTemplate DataType="{x:Type TabItem}">
					<Border x:Name="grid" Background="Transparent">
						<ContentPresenter>
							<ContentPresenter.Content>
								<Image x:Name="img" Height="24" Width="24" Source="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource StringToUriConverter}}"  />
							</ContentPresenter.Content>
							
						</ContentPresenter>
					</Border>
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabItem">
					<Border Name="Border" BorderThickness="0" BorderBrush="Transparent" Margin="0" Cursor="Hand">
						<ContentPresenter x:Name="ContentSite"
										VerticalAlignment="Center"
										HorizontalAlignment="Center"
										ContentSource="Header"
										Margin="10,2"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource brush_tabSelected}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="False">
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource brush_tabUnselected}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



	<Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="Visibility" Value="Hidden"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border Name="Border" Margin="1" CornerRadius="2" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1">
						<Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="Visibility" Value="Hidden"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border Background="Black" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border CornerRadius="4" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"  Width="8" Margin="8,0,-2,0"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition MaxHeight="0"/>
				<RowDefinition Height="0.00001*"/>
				<RowDefinition MaxHeight="0"/>
			</Grid.RowDefinitions>
			<Border Grid.RowSpan="3" CornerRadius="2" Background="Transparent" />
			<RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
			<Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
				<Track.DecreaseRepeatButton>
					<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" Background="{StaticResource HorizontalNormalBrush}" BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
				</Track.IncreaseRepeatButton>
			</Track>
			<RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z"/>
		</Grid>
	</ControlTemplate>
	<ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition MaxWidth="18"/>
				<ColumnDefinition Width="0.00001*"/>
				<ColumnDefinition MaxWidth="18"/>
			</Grid.ColumnDefinitions>
			<Border Grid.ColumnSpan="3" CornerRadius="2" Background="#F0F0F0"/>
			<RepeatButton Grid.Column="0"  Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
			<Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
				<Track.DecreaseRepeatButton>
					<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" />
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
				</Track.IncreaseRepeatButton>
			</Track>
			<RepeatButton Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z"/>
		</Grid>
	</ControlTemplate>
	<Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto"/>
				<Setter Property="Height" Value="18" />
				<Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
			</Trigger>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Width" Value="18"/>
				<Setter Property="Height" Value="Auto" />
				<Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<ScrollContentPresenter Grid.Column="1"/>
						<ScrollBar Name="PART_VerticalScrollBar" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
						<ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="1" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	

	<!-- Flat ComboBox -->
	

	

	

	<Style TargetType="DataGrid">
		<Setter Property="AlternatingRowBackground" Value="{DynamicResource brush_rowAlternateBackground}" />
	</Style>
	
	<Style TargetType="DataGridRow">
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Background" Value="White"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Background" Value="White"/>
				<Setter Property="Foreground" Value="Black" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style TargetType="DataGridCell">
		<Setter Property="Background" Value="White"/>
		<Setter Property="VerticalAlignment" Value="Stretch"/>
		<Setter Property="TextBlock.TextAlignment" Value="Center"/>
		<Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
		<Setter Property="Selector.BorderBrush" Value="Transparent"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="Selector.Background" Value="Transparent"/>
		<Setter Property="FontSize" Value="{DynamicResource fnt_txtBxContent}"/>
		
		
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Foreground" Value="Black" />
			</Trigger>
		</Style.Triggers>
	</Style>

    <DrawingImage x:Key="locationPin">
        <DrawingImage.Drawing>
            <DrawingGroup ClipGeometry="M0,0 V395.71 H395.71 V0 H0 Z">
                <DrawingGroup Opacity="1">
                    <GeometryDrawing Brush="#FF000000" Geometry="F1 M395.71,395.71z M0,0z M197.849,0C122.131,0 60.531,61.609 60.531,137.329 60.531,210.216 185.122,380.506 190.427,387.717L195.378,394.455C195.957,395.247 196.879,395.71 197.849,395.71 198.834,395.71 199.75,395.247 200.335,394.455L205.283,387.717C210.591,380.506 335.179,210.216 335.179,137.329 335.179,61.609 273.569,0 197.849,0z M197.849,88.138C224.979,88.138 247.04,110.2 247.04,137.329 247.04,164.444 224.978,186.52 197.849,186.52 170.735,186.52 148.658,164.444 148.658,137.329 148.658,110.2 170.734,88.138 197.849,88.138z" />
                </DrawingGroup>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>


    <DataTemplate x:Key="SoldierTooltipTemplate">
        <StackPanel Orientation="Vertical" Background="{DynamicResource brush_Background}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{DynamicResource lblSoldierName}"  Foreground="{DynamicResource brush_textColor}" Height="Auto"  VerticalAlignment="Bottom"  FontSize="{DynamicResource fnt_btnContent}" HorizontalAlignment="Left" Margin="10,0,0,0"  />

                <TextBlock  Text="{Binding  DataContext.ToolTipInfo.Name,RelativeSource={RelativeSource AncestorType=UserControl,Mode=FindAncestor},Mode=OneWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True}"  Foreground="{DynamicResource brush_textColor}" Height="Auto"  VerticalAlignment="Bottom"  FontSize="{DynamicResource fnt_txtBxContent}" HorizontalAlignment="Left" Margin="20,0,0,0"  />
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{DynamicResource lblSoldierRank}"  Foreground="{DynamicResource brush_textColor}" Height="Auto"  VerticalAlignment="Bottom"  FontSize="{DynamicResource fnt_btnContent}" HorizontalAlignment="Left" Margin="10,0,0,0"  />

                <TextBlock Text="{Binding  DataContext.ToolTipInfo.Rank,RelativeSource={RelativeSource AncestorType=UserControl,Mode=FindAncestor},Mode=OneWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True}"  Foreground="{DynamicResource brush_textColor}" Height="Auto"  VerticalAlignment="Bottom"  FontSize="{DynamicResource fnt_txtBxContent}" HorizontalAlignment="Left" Margin="20,0,0,0"  />
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{DynamicResource lblCountry}"  Foreground="{DynamicResource brush_textColor}" Height="Auto"  VerticalAlignment="Bottom"  FontSize="{DynamicResource fnt_btnContent}" HorizontalAlignment="Left" Margin="10,0,0,0"  />
                <TextBlock Text="{Binding  DataContext.ToolTipInfo.Country,RelativeSource={RelativeSource AncestorType=UserControl,Mode=FindAncestor},Mode=OneWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True}"  Foreground="{DynamicResource brush_textColor}" Height="Auto"  VerticalAlignment="Bottom"  FontSize="{DynamicResource fnt_txtBxContent}" HorizontalAlignment="Left" Margin="20,0,0,0"  />
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{DynamicResource lblTraining}"  Foreground="{DynamicResource brush_textColor}" Height="Auto"  VerticalAlignment="Bottom"  FontSize="{DynamicResource fnt_btnContent}" HorizontalAlignment="Left" Margin="10,0,0,0"  />
                <TextBlock Text="{Binding  DataContext.ToolTipInfo.Training,RelativeSource={RelativeSource AncestorType=UserControl,Mode=FindAncestor},Mode=OneWay,UpdateSourceTrigger=PropertyChanged,NotifyOnSourceUpdated=True}"  Foreground="{DynamicResource brush_textColor}" Height="Auto"  VerticalAlignment="Bottom"  FontSize="{DynamicResource fnt_txtBxContent}" HorizontalAlignment="Left" Margin="20,0,0,0"  />
            </StackPanel>
        </StackPanel>
    </DataTemplate>




</ResourceDictionary>